// Generated by CoffeeScript 1.9.0
(function() {
  var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  window.App = (function(_super) {
    __extends(App, _super);

    function App() {
      return App.__super__.constructor.apply(this, arguments);
    }

    App.prototype.initialize = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.get('playerHand').on('endOfTurn', this.dealerTurn, this);
      this.get('playerHand').on('endOfGame', this.decideWinner, this);
    };

    App.prototype.dealerTurn = function() {
      this.get('dealerHand').at(0).flip();
      while (this.get('dealerHand').optimalScore() < 17) {
        this.get('dealerHand').hit();
      }
      this.decideWinner();
    };

    App.prototype.decideWinner = function() {
      this.trigger('disable');
      if (this.get('playerHand').optimalScore() > 21) {
        return this.trigger('winnerDecided', 'Player is bust!');
      } else if (this.get('playerHand').optimalScore() === 21) {
        return this.trigger('winnerDecided', 'BlackJack!');
      } else if (this.get('dealerHand').optimalScore() > this.get('playerHand').optimalScore() && this.get('dealerHand').optimalScore() <= 21) {
        return this.trigger('winnerDecided', 'Dealer wins!');
      } else if (this.get('dealerHand').optimalScore() === this.get('playerHand').optimalScore()) {
        return this.trigger('winnerDecided', 'Tie game!');
      } else {
        return this.trigger('winnerDecided', 'Player wins!');
      }
    };

    App.prototype.newGame = function() {
      var deck;
      this.set('deck', deck = new Deck());
      this.set('playerHand', deck.dealPlayer());
      this.set('dealerHand', deck.dealDealer());
      this.get('playerHand').on('endOfTurn', this.dealerTurn, this);
      this.get('playerHand').on('endOfGame', this.decideWinner, this);
    };

    return App;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=App.js.map
