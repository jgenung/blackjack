// Generated by CoffeeScript 1.9.0
(function() {
  var __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __hasProp = {}.hasOwnProperty;

  window.AppView = (function(_super) {
    __extends(AppView, _super);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.template = _.template('<button class="hit-button">Hit</button> <button class="stand-button">Stand</button> <button class="new-game-button">New Game</button> <div class="player-hand-container"></div> <div class="dealer-hand-container"></div> <DIV id="PopUp" style="display: none; position: absolute; left: 100px; top: 50px; border: solid black 1px; padding: 10px; background-color: rgb(200,100,100); text-align: justify; font-size: 12px; width: 135px;"" onmouseover="document.getElementById("PopUp").style.display = "none" "> <SPAN id="PopUpText">TEXT</SPAN> </DIV>');

    AppView.prototype.events = {
      'click .hit-button': function() {
        return this.model.get('playerHand').hit();
      },
      'click .stand-button': function() {
        return this.model.get('playerHand').stand();
      },
      'click .new-game-button': function() {
        this.model.newGame();
        $('.hit-button').prop('disabled', false);
        $('.stand-button').prop('disabled', false);
        return this.render();
      }
    };

    AppView.prototype.initialize = function() {
      this.render();
      this.model.on('disable', this.disable, this);
      this.model.on('winnerDecided', (function(string) {
        $('#PopUp').css('display', 'block');
        return $('#PopUpText').text(string);
      }), this);
    };

    AppView.prototype.disable = function() {
      $('.stand-button').prop('disabled', true);
      $('.hit-button').prop('disabled', true);
    };

    AppView.prototype.render = function() {
      this.$el.children().detach();
      this.$el.html(this.template());
      this.$('.player-hand-container').html(new HandView({
        collection: this.model.get('playerHand')
      }).el);
      this.$('.dealer-hand-container').html(new HandView({
        collection: this.model.get('dealerHand')
      }).el);
      if (this.model.get('playerHand').optimalScore() > 15) {
        return this.trigger('winnerDecided', 'BlackJack!');
      }
    };

    return AppView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=AppView.js.map
